

==== src\components\AddStudent.jsx ====

import React, { useState } from 'react';
import dynamoDB from '../awsConfig';
import { PutCommand } from '@aws-sdk/lib-dynamodb';

const AddStudent = () => {
  const [studentID, setStudentID] = useState('');
  const [name, setName] = useState('');
  const [age, setAge] = useState('');

  const addStudent = async () => {
    const params = {
      TableName: 'StudentsTable',
      Item: {
        studentID,
        name,
        age
      }
    };

    try {
      const command = new PutCommand(params);
      await dynamoDB.send(command);
      alert('Student added successfully!');
    } catch (error) {
      console.error('Error adding student:', error);
    }
  };

  return (
    <div>
      <h2>Add Student</h2>
      <input
        type="text"
        placeholder="Student ID"
        value={studentID}
        onChange={(e) => setStudentID(e.target.value)}
      />
      <input
        type="text"
        placeholder="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <input
        type="text"
        placeholder="Age"
        value={age}
        onChange={(e) => setAge(e.target.value)}
      />
      <button onClick={addStudent}>Add Student</button>
    </div>
  );
};

export default AddStudent;


==== src\components\StudentList.jsx ====

import React, { useEffect, useState } from 'react';
import dynamoDB from '../awsConfig';
import { ScanCommand, DeleteCommand, UpdateCommand } from '@aws-sdk/lib-dynamodb';

const StudentList = () => {
  const [students, setStudents] = useState([]);
  const [editingStudentID, setEditingStudentID] = useState(null);
  const [updatedName, setUpdatedName] = useState('');
  const [updatedAge, setUpdatedAge] = useState('');

  useEffect(() => {
    const fetchStudents = async () => {
      const params = {
        TableName: 'StudentsTable',
      };

      try {
        const command = new ScanCommand(params);
        const data = await dynamoDB.send(command);
        setStudents(data.Items);
      } catch (error) {
        console.error('Error fetching students:', error);
      }
    };

    fetchStudents();
  }, []);

  const deleteStudent = async (studentID) => {
    const params = {
      TableName: 'StudentsTable',
      Key: {
        studentID: studentID,
      },
    };

    try {
      const command = new DeleteCommand(params);
      await dynamoDB.send(command);
      setStudents(students.filter(student => student.studentID !== studentID));
      alert('Student deleted successfully!');
    } catch (error) {
      console.error('Error deleting student:', error);
    }
  };

  const startEditing = (student) => {
    setEditingStudentID(student.studentID);
    setUpdatedName(student.name);
    setUpdatedAge(student.age);
  };

  const updateStudent = async () => {
    const params = {
      TableName: 'StudentsTable',
      Key: {
        studentID: editingStudentID,
      },
      UpdateExpression: 'set #name = :name, #age = :age',
      ExpressionAttributeNames: {
        '#name': 'name',
        '#age': 'age',
      },
      ExpressionAttributeValues: {
        ':name': updatedName,
        ':age': updatedAge,
      },
    };

    try {
      const command = new UpdateCommand(params);
      await dynamoDB.send(command);
      setStudents(
        students.map((student) =>
          student.studentID === editingStudentID
            ? { ...student, name: updatedName, age: updatedAge }
            : student
        )
      );
      setEditingStudentID(null);
      setUpdatedName('');
      setUpdatedAge('');
      alert('Student updated successfully!');
    } catch (error) {
      console.error('Error updating student:', error);
    }
  };

  return (
    <div>
      <h2>Student List</h2>
      <ul>
        {students.map((student, index) => (
          <li key={index}>
            {student.studentID} - {student.name} - {student.age}
            <button onClick={() => deleteStudent(student.studentID)}>Delete</button>
            <button onClick={() => startEditing(student)}>Update</button>
          </li>
        ))}
      </ul>

      {editingStudentID && (
        <div>
          <h3>Update Student</h3>
          <input
            type="text"
            placeholder="Name"
            value={updatedName}
            onChange={(e) => setUpdatedName(e.target.value)}
          />
          <input
            type="text"
            placeholder="Age"
            value={updatedAge}
            onChange={(e) => setUpdatedAge(e.target.value)}
          />
          <button onClick={updateStudent}>Save</button>
          <button onClick={() => setEditingStudentID(null)}>Cancel</button>
        </div>
      )}
    </div>
  );
};

export default StudentList;


==== src\App.css ====

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


==== src\App.jsx ====

import React from 'react';
import AddStudent from './components/AddStudent';
import StudentList from './components/StudentList';

const App = () => {
  return (
    <div>
      <h1>Cloud Computing FA-2: DynamoDB Integration</h1>
      <AddStudent />
      <StudentList />
    </div>
  );
};

export default App;


==== src\awsConfig.js ====

import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";

const client = new DynamoDBClient({
    region: "eu-north-1",
    credentials: {
      accessKeyId: import.meta.env.VITE_AWS_ACCESS_KEY_ID,
      secretAccessKey: import.meta.env.VITE_AWS_SECRET_ACCESS_KEY,
    },
  });

const dynamoDB = DynamoDBDocumentClient.from(client);
export default dynamoDB;


==== src\index.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

==== src\main.jsx ====

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import './index.css'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


==== postcss.config.js ====

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


==== tailwind.config.js ====

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}